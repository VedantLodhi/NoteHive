{"ast":null,"code":"// import React, { useState, useEffect } from \"react\";\n// import { FaClock, FaTrophy } from \"react-icons/fa\";\n// import { motion } from \"framer-motion\";\n\n// const CPTrivia = () => {\n//   const [quizData, setQuizData] = useState([]);\n//   const [currentQuestion, setCurrentQuestion] = useState(0);\n//   const [score, setScore] = useState(0);\n//   const [attemptsLeft, setAttemptsLeft] = useState(2);\n//   const [selectedAnswer, setSelectedAnswer] = useState(null);\n//   const [quizFinished, setQuizFinished] = useState(false);\n//   const [loading, setLoading] = useState(false);\n//   const [timer, setTimer] = useState(60);\n//   const [leaderboard, setLeaderboard] = useState([]);\n\n//   const [topic, setTopic] = useState(\"Data Structures\");\n//   const [difficulty, setDifficulty] = useState(\"Medium\");\n//   const [numQuestions, setNumQuestions] = useState(5);\n\n//   const topics = [\n//     \"React Js\", \"Node Js\",\n//     \"OOPS\", \"Operating System\", \"Computer Networks\",\"Linux\",\"Git\",\n//     \"DBMS\", \"System Design\", \"Data Structures\", \"Algorithms\"\n//   ];\n\n//   const difficulties = [\"Easy\", \"Medium\", \"Hard\"];\n\n//   // Fetch trivia questions\n//   const fetchTriviaData = async () => {\n//     setLoading(true);\n//     try {\n//       const response = await fetch(\"http://localhost:5000/api/generateTrivia\", {\n//         method: \"POST\",\n//         headers: { \"Content-Type\": \"application/json\" },\n//         body: JSON.stringify({ topic, difficulty, numQuestions }),\n//       });\n\n//       const data = await response.json();\n//       console.log(\"Received Data:\", data);\n\n//       if (data.quizzes) {\n//         setQuizData(data.quizzes);\n//         setCurrentQuestion(0);\n//         setScore(0);\n//         setAttemptsLeft(2);\n//         setQuizFinished(false);\n//         setSelectedAnswer(null);\n//         setTimer(60);\n//       } else {\n//         setQuizData([]);\n//       }\n//     } catch (error) {\n//       console.error(\"Error fetching trivia:\", error);\n//     }\n//     setLoading(false);\n//   };\n\n//   // Handle answer selection\n//   const handleAnswerClick = (option) => {\n//     if (selectedAnswer || attemptsLeft === 0) return;\n\n//     if (option === quizData[currentQuestion].answer) {\n//       // Correct Answer: Award points based on attempts\n//       setScore((prevScore) => prevScore + (attemptsLeft === 2 ? 10 : 5));\n//       setSelectedAnswer(option);\n//       setTimeout(() => nextQuestion(), 1000);\n//     } else {\n//       // Wrong Answer: Reduce attempts\n//       setAttemptsLeft((prev) => prev - 1);\n//       setSelectedAnswer(option);\n\n//       if (attemptsLeft === 2) {\n//         // First Wrong Attempt: Reset selection after a delay\n//         setTimeout(() => setSelectedAnswer(null), 1000);\n//       } else {\n//         // Second Wrong Attempt: Move to next question\n//         setTimeout(() => nextQuestion(), 1000);\n//       }\n//     }\n//   };\n\n//   // Move to next question or finish quiz\n//   const nextQuestion = () => {\n//     if (currentQuestion + 1 < quizData.length) {\n//       setCurrentQuestion((prev) => prev + 1);\n//       setAttemptsLeft(2);\n//       setSelectedAnswer(null);\n//       setTimer(60);\n//     } else {\n//       setQuizFinished(true);\n//       updateLeaderboard();\n//     }\n//   };\n\n//   // Timer logic\n//   useEffect(() => {\n//     if (quizFinished) return;\n//     if (timer === 0) {\n//       nextQuestion();\n//       return;\n//     }\n\n//     const interval = setTimeout(() => setTimer((prev) => prev - 1), 1000);\n//     return () => clearTimeout(interval);\n//   }, [timer, quizFinished]);\n\n//   // Update leaderboard\n//   const updateLeaderboard = () => {\n//     setLeaderboard((prev) => [\n//       ...prev,\n//       { topic, difficulty, score, timestamp: new Date().toISOString() }\n//     ]);\n//   };\n\n//   const saveLeaderboard = async () => {\n//     const token = localStorage.getItem(\"token\");\n//     const username = localStorage.getItem(\"username\"); // Ensure username is stored\n\n//     if (!token || !username) {\n//       console.warn(\"User not authenticated or missing username.\");\n//       return;\n//     }\n\n//     try {\n//       const response = await fetch(\"http://localhost:5000/api/leaderboard/saveLeaderboard\", {\n//         method: \"POST\",\n//         headers: {\n//           \"Content-Type\": \"application/json\",\n//           \"Authorization\": `Bearer ${token}`,\n//         },\n//         body: JSON.stringify({ username, topic, difficulty, score }),\n//       });\n\n//       if (!response.ok) {\n//         throw new Error(`Error ${response.status}: ${response.statusText}`);\n//       }\n\n//       console.log(\"Leaderboard entry saved successfully.\");\n//       fetchLeaderboard(); // Refresh leaderboard after saving\n//     } catch (error) {\n//       console.error(\"Error saving leaderboard:\", error);\n//     }\n//   };\n\n//   const fetchLeaderboard = async () => {\n//     const token = localStorage.getItem(\"token\");\n\n//     if (!token) {\n//       console.warn(\"No authentication token found.\");\n//       return;\n//     }\n\n//     try {\n//       const response = await fetch(\"http://localhost:5000/api/leaderboard/getLeaderboard\", {\n//         method: \"GET\",\n//         headers: {\n//           \"Content-Type\": \"application/json\",\n//           \"Authorization\": `Bearer ${token}`,\n//         },\n//       });\n\n//       const data = await response.json();\n//       console.log(\"Raw leaderboard data:\", data); // Log the response\n\n//       // Ensure leaderboard is an array\n//       if (!Array.isArray(data.leaderboard)) {\n//         throw new Error(\"Invalid leaderboard data format\");\n//       }\n\n//       setLeaderboard(data.leaderboard);\n//     } catch (error) {\n//       console.error(\"Error fetching leaderboard:\", error);\n//       setLeaderboard([]); // Ensure leaderboard remains an array\n//     }\n//   };\n\n//   useEffect(() => {\n//     fetchLeaderboard();\n//   }, []); // Run only once when component loads\n\n//   return (\n//     <div className=\"min-h-screen flex flex-col items-center justify-center bg-gray-900 text-white p-6\">\n//       <h1 className=\"text-3xl font-bold mb-4 animate-fade-in\">\n//       ðŸ’¡CP Trivia & QuizzesðŸ’¡\n//       </h1>\n\n//       {/* Topic & Difficulty Selection */}\n//       <div className=\"flex flex-wrap gap-4 mb-4\">\n//         <select className=\"px-4 py-2 bg-gray-700 rounded-md\" value={topic} onChange={(e) => setTopic(e.target.value)}>\n//           {topics.map((t) => <option key={t} value={t}>{t}</option>)}\n//         </select>\n\n//         <select className=\"px-4 py-2 bg-gray-700 rounded-md\" value={difficulty} onChange={(e) => setDifficulty(e.target.value)}>\n//           {difficulties.map((d) => <option key={d} value={d}>{d}</option>)}\n//         </select>\n\n//         <input type=\"number\" min=\"1\" max=\"10\" value={numQuestions} onChange={(e) => setNumQuestions(e.target.value)}\n//           className=\"px-4 py-2 bg-gray-700 rounded-md text-center w-20\" />\n//       </div>\n\n//       {/* Generate Quiz Button */}\n//       <button onClick={fetchTriviaData} disabled={loading}\n//         className=\"px-6 py-3 bg-blue-600 hover:bg-blue-700 disabled:bg-gray-500 text-white font-semibold rounded-lg transition-transform transform hover:scale-105 active:scale-95 mb-6\">\n//         {loading ? \"Generating Quiz...\" : \"Generate Quiz\"}\n//       </button>\n\n//       {/* Quiz Container */}\n//       {!quizFinished && quizData.length > 0 && (\n//         <div className=\"w-full max-w-lg p-6 bg-gray-800 rounded-lg shadow-md animate-fade-in\">\n//           <h2 className=\"text-xl font-semibold mb-4\">\n//             Question {currentQuestion + 1}:\n//           </h2>\n//           <p className=\"text-lg\">{quizData[currentQuestion].question}</p>\n\n//           <ul className=\"mt-4 space-y-3\">\n//             {quizData[currentQuestion].options.map((option, idx) => (\n//               <motion.li\n//                 key={idx}\n//                 onClick={() => handleAnswerClick(option)}\n//                 className={`p-3 rounded-lg cursor-pointer transition duration-300 ${\n//                   selectedAnswer === option \n//                     ? option === quizData[currentQuestion].answer\n//                       ? \"bg-green-500\"\n//                       : \"bg-red-500\"\n//                     : \"bg-gray-700 hover:bg-gray-600\"\n//                 }`}\n//                 whileTap={{ scale: 0.95 }}\n//               >\n//                 {option}\n//               </motion.li>\n//             ))}\n//           </ul>\n\n//           <div className=\"flex justify-between mt-4\">\n//             <p className=\"text-sm text-gray-300\">Attempts Left: {attemptsLeft}</p>\n//             <p className=\"text-sm text-red-400 flex items-center\">\n//               <FaClock className=\"mr-1\" /> Time Left: {timer}s\n//             </p>\n//           </div>\n//         </div>\n//       )}\n\n//       {/* Leaderboard */}\n//       <div className=\"w-full max-w-lg mt-6\">\n//         <h3 className=\"text-xl font-bold mb-2 flex items-center\">\n//           <FaTrophy className=\"mr-2 text-yellow-400\" /> Leaderboard\n//         </h3>\n//         <table className=\"w-full bg-gray-800 text-white rounded-lg\">\n//           <thead>\n//             <tr className=\"bg-gray-700\">\n//               <th className=\"p-2\">#</th>\n//               <th className=\"p-2\">Topic</th>\n//               <th className=\"p-2\">Difficulty</th>\n//               <th className=\"p-2\">Score</th>\n//             </tr>\n//           </thead>\n//           <tbody>\n//   {Array.isArray(leaderboard) && leaderboard.length > 0 ? (\n//     leaderboard.sort((a, b) => b.score - a.score).map((entry, idx) => (\n//       <tr key={idx} className=\"text-center border-b border-gray-600\">\n//         <td className=\"p-2\">{idx + 1}</td>\n//         <td className=\"p-2\">{entry.topic}</td>\n//         <td className=\"p-2\">{entry.difficulty}</td>\n//         <td className=\"p-2\">{entry.score}</td>\n//       </tr>\n//     ))\n//   ) : (\n//     <tr>\n//       <td colSpan=\"4\" className=\"p-4 text-center text-gray-400\">\n//         No leaderboard data available.\n//       </td>\n//     </tr>\n//   )}\n// </tbody>\n//         </table>\n//       </div>\n//     </div>\n//   );\n// };\n\n// export default CPTrivia;","map":{"version":3,"names":[],"sources":["C:/Users/Anshi/Desktop/NoteHive-main/client/src/pages/CPTrivia.js"],"sourcesContent":["// import React, { useState, useEffect } from \"react\";\n// import { FaClock, FaTrophy } from \"react-icons/fa\";\n// import { motion } from \"framer-motion\";\n\n// const CPTrivia = () => {\n//   const [quizData, setQuizData] = useState([]);\n//   const [currentQuestion, setCurrentQuestion] = useState(0);\n//   const [score, setScore] = useState(0);\n//   const [attemptsLeft, setAttemptsLeft] = useState(2);\n//   const [selectedAnswer, setSelectedAnswer] = useState(null);\n//   const [quizFinished, setQuizFinished] = useState(false);\n//   const [loading, setLoading] = useState(false);\n//   const [timer, setTimer] = useState(60);\n//   const [leaderboard, setLeaderboard] = useState([]);\n\n//   const [topic, setTopic] = useState(\"Data Structures\");\n//   const [difficulty, setDifficulty] = useState(\"Medium\");\n//   const [numQuestions, setNumQuestions] = useState(5);\n\n//   const topics = [\n//     \"React Js\", \"Node Js\",\n//     \"OOPS\", \"Operating System\", \"Computer Networks\",\"Linux\",\"Git\",\n//     \"DBMS\", \"System Design\", \"Data Structures\", \"Algorithms\"\n//   ];\n\n//   const difficulties = [\"Easy\", \"Medium\", \"Hard\"];\n\n//   // Fetch trivia questions\n//   const fetchTriviaData = async () => {\n//     setLoading(true);\n//     try {\n//       const response = await fetch(\"http://localhost:5000/api/generateTrivia\", {\n//         method: \"POST\",\n//         headers: { \"Content-Type\": \"application/json\" },\n//         body: JSON.stringify({ topic, difficulty, numQuestions }),\n//       });\n\n//       const data = await response.json();\n//       console.log(\"Received Data:\", data);\n\n//       if (data.quizzes) {\n//         setQuizData(data.quizzes);\n//         setCurrentQuestion(0);\n//         setScore(0);\n//         setAttemptsLeft(2);\n//         setQuizFinished(false);\n//         setSelectedAnswer(null);\n//         setTimer(60);\n//       } else {\n//         setQuizData([]);\n//       }\n//     } catch (error) {\n//       console.error(\"Error fetching trivia:\", error);\n//     }\n//     setLoading(false);\n//   };\n\n//   // Handle answer selection\n//   const handleAnswerClick = (option) => {\n//     if (selectedAnswer || attemptsLeft === 0) return;\n  \n//     if (option === quizData[currentQuestion].answer) {\n//       // Correct Answer: Award points based on attempts\n//       setScore((prevScore) => prevScore + (attemptsLeft === 2 ? 10 : 5));\n//       setSelectedAnswer(option);\n//       setTimeout(() => nextQuestion(), 1000);\n//     } else {\n//       // Wrong Answer: Reduce attempts\n//       setAttemptsLeft((prev) => prev - 1);\n//       setSelectedAnswer(option);\n  \n//       if (attemptsLeft === 2) {\n//         // First Wrong Attempt: Reset selection after a delay\n//         setTimeout(() => setSelectedAnswer(null), 1000);\n//       } else {\n//         // Second Wrong Attempt: Move to next question\n//         setTimeout(() => nextQuestion(), 1000);\n//       }\n//     }\n//   };\n  \n\n//   // Move to next question or finish quiz\n//   const nextQuestion = () => {\n//     if (currentQuestion + 1 < quizData.length) {\n//       setCurrentQuestion((prev) => prev + 1);\n//       setAttemptsLeft(2);\n//       setSelectedAnswer(null);\n//       setTimer(60);\n//     } else {\n//       setQuizFinished(true);\n//       updateLeaderboard();\n//     }\n//   };\n\n//   // Timer logic\n//   useEffect(() => {\n//     if (quizFinished) return;\n//     if (timer === 0) {\n//       nextQuestion();\n//       return;\n//     }\n\n//     const interval = setTimeout(() => setTimer((prev) => prev - 1), 1000);\n//     return () => clearTimeout(interval);\n//   }, [timer, quizFinished]);\n\n//   // Update leaderboard\n//   const updateLeaderboard = () => {\n//     setLeaderboard((prev) => [\n//       ...prev,\n//       { topic, difficulty, score, timestamp: new Date().toISOString() }\n//     ]);\n//   };\n\n//   const saveLeaderboard = async () => {\n//     const token = localStorage.getItem(\"token\");\n//     const username = localStorage.getItem(\"username\"); // Ensure username is stored\n    \n//     if (!token || !username) {\n//       console.warn(\"User not authenticated or missing username.\");\n//       return;\n//     }\n  \n//     try {\n//       const response = await fetch(\"http://localhost:5000/api/leaderboard/saveLeaderboard\", {\n//         method: \"POST\",\n//         headers: {\n//           \"Content-Type\": \"application/json\",\n//           \"Authorization\": `Bearer ${token}`,\n//         },\n//         body: JSON.stringify({ username, topic, difficulty, score }),\n//       });\n  \n//       if (!response.ok) {\n//         throw new Error(`Error ${response.status}: ${response.statusText}`);\n//       }\n  \n//       console.log(\"Leaderboard entry saved successfully.\");\n//       fetchLeaderboard(); // Refresh leaderboard after saving\n//     } catch (error) {\n//       console.error(\"Error saving leaderboard:\", error);\n//     }\n//   };\n  \n//   const fetchLeaderboard = async () => {\n//     const token = localStorage.getItem(\"token\");\n  \n//     if (!token) {\n//       console.warn(\"No authentication token found.\");\n//       return;\n//     }\n  \n//     try {\n//       const response = await fetch(\"http://localhost:5000/api/leaderboard/getLeaderboard\", {\n//         method: \"GET\",\n//         headers: {\n//           \"Content-Type\": \"application/json\",\n//           \"Authorization\": `Bearer ${token}`,\n//         },\n//       });\n  \n//       const data = await response.json();\n//       console.log(\"Raw leaderboard data:\", data); // Log the response\n  \n//       // Ensure leaderboard is an array\n//       if (!Array.isArray(data.leaderboard)) {\n//         throw new Error(\"Invalid leaderboard data format\");\n//       }\n  \n//       setLeaderboard(data.leaderboard);\n//     } catch (error) {\n//       console.error(\"Error fetching leaderboard:\", error);\n//       setLeaderboard([]); // Ensure leaderboard remains an array\n//     }\n//   };\n  \n//   useEffect(() => {\n//     fetchLeaderboard();\n//   }, []); // Run only once when component loads\n  \n  \n\n//   return (\n//     <div className=\"min-h-screen flex flex-col items-center justify-center bg-gray-900 text-white p-6\">\n//       <h1 className=\"text-3xl font-bold mb-4 animate-fade-in\">\n//       ðŸ’¡CP Trivia & QuizzesðŸ’¡\n//       </h1>\n\n//       {/* Topic & Difficulty Selection */}\n//       <div className=\"flex flex-wrap gap-4 mb-4\">\n//         <select className=\"px-4 py-2 bg-gray-700 rounded-md\" value={topic} onChange={(e) => setTopic(e.target.value)}>\n//           {topics.map((t) => <option key={t} value={t}>{t}</option>)}\n//         </select>\n\n//         <select className=\"px-4 py-2 bg-gray-700 rounded-md\" value={difficulty} onChange={(e) => setDifficulty(e.target.value)}>\n//           {difficulties.map((d) => <option key={d} value={d}>{d}</option>)}\n//         </select>\n\n//         <input type=\"number\" min=\"1\" max=\"10\" value={numQuestions} onChange={(e) => setNumQuestions(e.target.value)}\n//           className=\"px-4 py-2 bg-gray-700 rounded-md text-center w-20\" />\n//       </div>\n\n//       {/* Generate Quiz Button */}\n//       <button onClick={fetchTriviaData} disabled={loading}\n//         className=\"px-6 py-3 bg-blue-600 hover:bg-blue-700 disabled:bg-gray-500 text-white font-semibold rounded-lg transition-transform transform hover:scale-105 active:scale-95 mb-6\">\n//         {loading ? \"Generating Quiz...\" : \"Generate Quiz\"}\n//       </button>\n\n//       {/* Quiz Container */}\n//       {!quizFinished && quizData.length > 0 && (\n//         <div className=\"w-full max-w-lg p-6 bg-gray-800 rounded-lg shadow-md animate-fade-in\">\n//           <h2 className=\"text-xl font-semibold mb-4\">\n//             Question {currentQuestion + 1}:\n//           </h2>\n//           <p className=\"text-lg\">{quizData[currentQuestion].question}</p>\n\n//           <ul className=\"mt-4 space-y-3\">\n//             {quizData[currentQuestion].options.map((option, idx) => (\n//               <motion.li\n//                 key={idx}\n//                 onClick={() => handleAnswerClick(option)}\n//                 className={`p-3 rounded-lg cursor-pointer transition duration-300 ${\n//                   selectedAnswer === option \n//                     ? option === quizData[currentQuestion].answer\n//                       ? \"bg-green-500\"\n//                       : \"bg-red-500\"\n//                     : \"bg-gray-700 hover:bg-gray-600\"\n//                 }`}\n//                 whileTap={{ scale: 0.95 }}\n//               >\n//                 {option}\n//               </motion.li>\n//             ))}\n//           </ul>\n\n//           <div className=\"flex justify-between mt-4\">\n//             <p className=\"text-sm text-gray-300\">Attempts Left: {attemptsLeft}</p>\n//             <p className=\"text-sm text-red-400 flex items-center\">\n//               <FaClock className=\"mr-1\" /> Time Left: {timer}s\n//             </p>\n//           </div>\n//         </div>\n//       )}\n\n//       {/* Leaderboard */}\n//       <div className=\"w-full max-w-lg mt-6\">\n//         <h3 className=\"text-xl font-bold mb-2 flex items-center\">\n//           <FaTrophy className=\"mr-2 text-yellow-400\" /> Leaderboard\n//         </h3>\n//         <table className=\"w-full bg-gray-800 text-white rounded-lg\">\n//           <thead>\n//             <tr className=\"bg-gray-700\">\n//               <th className=\"p-2\">#</th>\n//               <th className=\"p-2\">Topic</th>\n//               <th className=\"p-2\">Difficulty</th>\n//               <th className=\"p-2\">Score</th>\n//             </tr>\n//           </thead>\n//           <tbody>\n//   {Array.isArray(leaderboard) && leaderboard.length > 0 ? (\n//     leaderboard.sort((a, b) => b.score - a.score).map((entry, idx) => (\n//       <tr key={idx} className=\"text-center border-b border-gray-600\">\n//         <td className=\"p-2\">{idx + 1}</td>\n//         <td className=\"p-2\">{entry.topic}</td>\n//         <td className=\"p-2\">{entry.difficulty}</td>\n//         <td className=\"p-2\">{entry.score}</td>\n//       </tr>\n//     ))\n//   ) : (\n//     <tr>\n//       <td colSpan=\"4\" className=\"p-4 text-center text-gray-400\">\n//         No leaderboard data available.\n//       </td>\n//     </tr>\n//   )}\n// </tbody>\n//         </table>\n//       </div>\n//     </div>\n//   );\n// };\n\n// export default CPTrivia;\n"],"mappings":"AAAA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAIA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}