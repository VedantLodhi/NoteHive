{"ast":null,"code":"// import React, { useState, useEffect } from \"react\";\n// import { Editor } from \"@tinymce/tinymce-react\"; // Import TinyMCE\n// import { useNavigate } from \"react-router-dom\";\n// //import \"tinymce/skins/content/default/content.css\"; // Import default TinyMCE styles\n// import \"../css/NoteManager.css\"; // Import CSS file\n\n// const NoteManager = () => {\n//   const navigate = useNavigate();\n//   const [notes, setNotes] = useState([]);\n//   const [loading, setLoading] = useState(true);\n//   const [note, setNote] = useState({ title: \"\", content: \"\" });\n//   const [editingNoteId, setEditingNoteId] = useState(null);\n\n//   // Fetch notes from localStorage\n//   useEffect(() => {\n//     const storedNotes = JSON.parse(localStorage.getItem(\"notes\")) || [];\n//     setNotes(storedNotes);\n//     setLoading(false);\n//   }, []);\n\n//   const saveNote = () => {\n//     const updatedNotes = [...notes];\n//     const newNote = { ...note, id: Date.now() };\n\n//     // Ensure content doesn't have unnecessary wrapping <p> tags\n//     const cleanedContent = newNote.content.replace(/^<p>/, \"\").replace(/<\\/p>$/, \"\");\n//     newNote.content = cleanedContent;\n//     console.log(\"Saving content:\", newNote.content); \n\n//     if (editingNoteId) {\n//       const index = notes.findIndex((n) => n.id === editingNoteId);\n//       updatedNotes[index] = newNote;\n//     } else {\n//       updatedNotes.unshift(newNote);\n//     }\n\n//     localStorage.setItem(\"notes\", JSON.stringify(updatedNotes));\n//     setNotes(updatedNotes);\n\n//     setNote({ title: \"\", content: \"\" });\n//     setEditingNoteId(null);\n//   };\n\n//   const editNote = (note) => {\n//     setEditingNoteId(note.id);\n//     setNote({ title: note.title, content: note.content });\n//   };\n\n//   const deleteNote = (noteId) => {\n//     const updatedNotes = notes.filter((n) => n.id !== noteId);\n//     localStorage.setItem(\"notes\", JSON.stringify(updatedNotes));\n//     setNotes(updatedNotes);\n//   };\n\n//   if (loading) return <p>Loading...</p>;\n\n//   return (\n//     <div className=\"note-manager-container\">\n//       <h2>Note Manager</h2>\n\n//       <div className=\"note-editor\">\n//         <input\n//           type=\"text\"\n//           placeholder=\"Title\"\n//           value={note.title}\n//           onChange={(e) => setNote({ ...note, title: e.target.value })}\n//           className=\"note-title-input\"\n//         />\n//         {/* TinyMCE Editor */}\n//         <Editor\n//   apiKey=\"qks55it6scopg5ibx5k982jzxunxu1x79rdlzkmx2yapv5bb\" // Use this for the free version\n//   value={note.content}\n//   onEditorChange={(content) => setNote({ ...note, content })}\n//   init={{\n//     height: 250,\n//     menubar: false,\n//     plugins: \"lists link image table code\",\n//     toolbar: \"undo redo | bold italic underline | bullist numlist | link | code\",\n//     content_css: \"https://cdn.jsdelivr.net/npm/tinymce@5/skins/ui/oxide/content.css\", // Load styles\n//   }}\n// />\n//         <button onClick={saveNote} className=\"save-button\">\n//           {editingNoteId ? \"Update Note\" : \"Add Note\"}\n//         </button>\n//       </div>\n\n//       <h3>All Notes</h3>\n//       <table className=\"notes-table\">\n//         <thead>\n//           <tr>\n//             <th>Title</th>\n//             <th>Content</th>\n//             <th>Actions</th>\n//           </tr>\n//         </thead>\n//         <tbody>\n//           {notes.map((note) => (\n//             <tr key={note.id}>\n//               <td>{note.title}</td>\n//               <td dangerouslySetInnerHTML={{ __html: note.content }}></td>\n//               <td>\n//                 <button onClick={() => editNote(note)} className=\"edit-button\">\n//                   Edit\n//                 </button>\n//                 <button\n//                   onClick={() => deleteNote(note.id)}\n//                   className=\"delete-button\"\n//                 >\n//                   Delete\n//                 </button>\n//               </td>\n//             </tr>\n//           ))}\n//         </tbody>\n//       </table>\n//     </div>\n//   );\n// };\n\n// export default NoteManager;\n\n// import React, { useState, useEffect } from \"react\";\n// import { Editor } from \"@tinymce/tinymce-react\";\n// import { useNavigate } from \"react-router-dom\";\n// import axios from \"axios\";\n// import \"../css/NoteManager.css\";\n\n// const NoteManager = () => {\n//   const navigate = useNavigate();\n//   const [notes, setNotes] = useState([]);\n//   const [loading, setLoading] = useState(true);\n//   const [note, setNote] = useState({ title: \"\", subject: \"\", content: \"\" });\n//   const [editingNoteId, setEditingNoteId] = useState(null);\n\n//   const token = localStorage.getItem(\"token\"); // assuming you store your auth token here\n\n//   // Fetch all notes on mount\n//   useEffect(() => {\n//     const fetchNotes = async () => {\n//       try {\n//         const response = await axios.get(\"http://localhost:5000/api/notes\", {\n//           headers: { Authorization: `Bearer ${token}` },\n//         });\n//         setNotes(response.data);\n//       } catch (error) {\n//         console.error(\"Error fetching notes:\", error);\n//       } finally {\n//         setLoading(false);\n//       }\n//     };\n\n//     fetchNotes();\n//   }, [token]);\n\n//   const saveNote = async () => {\n//     const cleanedContent = note.content.replace(/^<p>/, \"\").replace(/<\\/p>$/, \"\");\n\n//     try {\n//       if (editingNoteId) {\n//         // Update existing note\n//         const response = await axios.put(\n//           `http://localhost:5000/api/notes/${editingNoteId}`,\n//           { ...note, content: cleanedContent },\n//           {\n//             headers: { Authorization: `Bearer ${token}` },\n//           }\n//         );\n//         const updated = notes.map((n) => (n._id === editingNoteId ? response.data.note : n));\n//         setNotes(updated);\n//       } else {\n//         // Create new note\n//         const response = await axios.post(\n//           \"http://localhost:/api/notes\",\n//           { ...note, content: cleanedContent },\n//           {\n//             headers: { Authorization: `Bearer ${token}` },\n//           }\n//         );\n//         setNotes([response.data.note, ...notes]);\n//       }\n\n//       setNote({ title: \"\", subject: \"\", content: \"\" });\n//       setEditingNoteId(null);\n//     } catch (error) {\n//       console.error(\"Error saving note:\", error);\n//     }\n//   };\n\n//   const editNote = (note) => {\n//     setEditingNoteId(note._id);\n//     setNote({ title: note.title, subject: note.subject, content: note.content });\n//   };\n\n//   const deleteNote = async (id) => {\n//     try {\n//       await axios.delete(`http://localhost:5000/api/notes/${id}`, {\n//         headers: { Authorization: `Bearer ${token}` },\n//       });\n//       setNotes(notes.filter((n) => n._id !== id));\n//     } catch (error) {\n//       console.error(\"Error deleting note:\", error);\n//     }\n//   };\n\n//   if (loading) return <p>Loading...</p>;\n\n//   return (\n//     <div className=\"note-manager-container\">\n//       <h2>Note Manager</h2>\n\n//       <div className=\"note-editor\">\n//         <input\n//           type=\"text\"\n//           placeholder=\"Title\"\n//           value={note.title}\n//           onChange={(e) => setNote({ ...note, title: e.target.value })}\n//           className=\"note-title-input\"\n//         />\n//         <input\n//           type=\"text\"\n//           placeholder=\"Subject\"\n//           value={note.subject}\n//           onChange={(e) => setNote({ ...note, subject: e.target.value })}\n//           className=\"note-subject-input\"\n//         />\n//         <Editor\n//           apiKey=\"qks55it6scopg5ibx5k982jzxunxu1x79rdlzkmx2yapv5bb\"\n//           value={note.content}\n//           onEditorChange={(content) => setNote({ ...note, content })}\n//           init={{\n//             height: 250,\n//             menubar: false,\n//             plugins: \"lists link image table code\",\n//             toolbar: \"undo redo | bold italic underline | bullist numlist | link | code\",\n//             content_css: \"https://cdn.jsdelivr.net/npm/tinymce@5/skins/ui/oxide/content.css\",\n//           }}\n//         />\n//         <button onClick={saveNote} className=\"save-button\">\n//           {editingNoteId ? \"Update Note\" : \"Add Note\"}\n//         </button>\n//       </div>\n\n//       <h3>All Notes</h3>\n//       <table className=\"notes-table\">\n//         <thead>\n//           <tr>\n//             <th>Title</th>\n//             <th>Subject</th>\n//             <th>Content</th>\n//             <th>Actions</th>\n//           </tr>\n//         </thead>\n//         <tbody>\n//           {notes.map((note) => (\n//             <tr key={note._id}>\n//               <td>{note.title}</td>\n//               <td>{note.subject}</td>\n//               <td dangerouslySetInnerHTML={{ __html: note.content }}></td>\n//               <td>\n//                 <button onClick={() => editNote(note)} className=\"edit-button\">\n//                   Edit\n//                 </button>\n//                 <button\n//                   onClick={() => deleteNote(note._id)}\n//                   className=\"delete-button\"\n//                 >\n//                   Delete\n//                 </button>\n//               </td>\n//             </tr>\n//           ))}\n//         </tbody>\n//       </table>\n//     </div>\n//   );\n// };\n\n// export default NoteManager;","map":{"version":3,"names":[],"sources":["C:/Users/Anshi/Desktop/NoteHive-main/client/src/pages/NoteManager.js"],"sourcesContent":["// import React, { useState, useEffect } from \"react\";\n// import { Editor } from \"@tinymce/tinymce-react\"; // Import TinyMCE\n// import { useNavigate } from \"react-router-dom\";\n// //import \"tinymce/skins/content/default/content.css\"; // Import default TinyMCE styles\n// import \"../css/NoteManager.css\"; // Import CSS file\n\n// const NoteManager = () => {\n//   const navigate = useNavigate();\n//   const [notes, setNotes] = useState([]);\n//   const [loading, setLoading] = useState(true);\n//   const [note, setNote] = useState({ title: \"\", content: \"\" });\n//   const [editingNoteId, setEditingNoteId] = useState(null);\n\n//   // Fetch notes from localStorage\n//   useEffect(() => {\n//     const storedNotes = JSON.parse(localStorage.getItem(\"notes\")) || [];\n//     setNotes(storedNotes);\n//     setLoading(false);\n//   }, []);\n\n//   const saveNote = () => {\n//     const updatedNotes = [...notes];\n//     const newNote = { ...note, id: Date.now() };\n\n//     // Ensure content doesn't have unnecessary wrapping <p> tags\n//     const cleanedContent = newNote.content.replace(/^<p>/, \"\").replace(/<\\/p>$/, \"\");\n//     newNote.content = cleanedContent;\n//     console.log(\"Saving content:\", newNote.content); \n\n//     if (editingNoteId) {\n//       const index = notes.findIndex((n) => n.id === editingNoteId);\n//       updatedNotes[index] = newNote;\n//     } else {\n//       updatedNotes.unshift(newNote);\n//     }\n\n//     localStorage.setItem(\"notes\", JSON.stringify(updatedNotes));\n//     setNotes(updatedNotes);\n\n//     setNote({ title: \"\", content: \"\" });\n//     setEditingNoteId(null);\n//   };\n\n//   const editNote = (note) => {\n//     setEditingNoteId(note.id);\n//     setNote({ title: note.title, content: note.content });\n//   };\n\n//   const deleteNote = (noteId) => {\n//     const updatedNotes = notes.filter((n) => n.id !== noteId);\n//     localStorage.setItem(\"notes\", JSON.stringify(updatedNotes));\n//     setNotes(updatedNotes);\n//   };\n\n//   if (loading) return <p>Loading...</p>;\n\n//   return (\n//     <div className=\"note-manager-container\">\n//       <h2>Note Manager</h2>\n\n//       <div className=\"note-editor\">\n//         <input\n//           type=\"text\"\n//           placeholder=\"Title\"\n//           value={note.title}\n//           onChange={(e) => setNote({ ...note, title: e.target.value })}\n//           className=\"note-title-input\"\n//         />\n//         {/* TinyMCE Editor */}\n//         <Editor\n//   apiKey=\"qks55it6scopg5ibx5k982jzxunxu1x79rdlzkmx2yapv5bb\" // Use this for the free version\n//   value={note.content}\n//   onEditorChange={(content) => setNote({ ...note, content })}\n//   init={{\n//     height: 250,\n//     menubar: false,\n//     plugins: \"lists link image table code\",\n//     toolbar: \"undo redo | bold italic underline | bullist numlist | link | code\",\n//     content_css: \"https://cdn.jsdelivr.net/npm/tinymce@5/skins/ui/oxide/content.css\", // Load styles\n//   }}\n// />\n//         <button onClick={saveNote} className=\"save-button\">\n//           {editingNoteId ? \"Update Note\" : \"Add Note\"}\n//         </button>\n//       </div>\n\n//       <h3>All Notes</h3>\n//       <table className=\"notes-table\">\n//         <thead>\n//           <tr>\n//             <th>Title</th>\n//             <th>Content</th>\n//             <th>Actions</th>\n//           </tr>\n//         </thead>\n//         <tbody>\n//           {notes.map((note) => (\n//             <tr key={note.id}>\n//               <td>{note.title}</td>\n//               <td dangerouslySetInnerHTML={{ __html: note.content }}></td>\n//               <td>\n//                 <button onClick={() => editNote(note)} className=\"edit-button\">\n//                   Edit\n//                 </button>\n//                 <button\n//                   onClick={() => deleteNote(note.id)}\n//                   className=\"delete-button\"\n//                 >\n//                   Delete\n//                 </button>\n//               </td>\n//             </tr>\n//           ))}\n//         </tbody>\n//       </table>\n//     </div>\n//   );\n// };\n\n// export default NoteManager;\n\n// import React, { useState, useEffect } from \"react\";\n// import { Editor } from \"@tinymce/tinymce-react\";\n// import { useNavigate } from \"react-router-dom\";\n// import axios from \"axios\";\n// import \"../css/NoteManager.css\";\n\n// const NoteManager = () => {\n//   const navigate = useNavigate();\n//   const [notes, setNotes] = useState([]);\n//   const [loading, setLoading] = useState(true);\n//   const [note, setNote] = useState({ title: \"\", subject: \"\", content: \"\" });\n//   const [editingNoteId, setEditingNoteId] = useState(null);\n\n//   const token = localStorage.getItem(\"token\"); // assuming you store your auth token here\n\n//   // Fetch all notes on mount\n//   useEffect(() => {\n//     const fetchNotes = async () => {\n//       try {\n//         const response = await axios.get(\"http://localhost:5000/api/notes\", {\n//           headers: { Authorization: `Bearer ${token}` },\n//         });\n//         setNotes(response.data);\n//       } catch (error) {\n//         console.error(\"Error fetching notes:\", error);\n//       } finally {\n//         setLoading(false);\n//       }\n//     };\n\n//     fetchNotes();\n//   }, [token]);\n\n//   const saveNote = async () => {\n//     const cleanedContent = note.content.replace(/^<p>/, \"\").replace(/<\\/p>$/, \"\");\n\n//     try {\n//       if (editingNoteId) {\n//         // Update existing note\n//         const response = await axios.put(\n//           `http://localhost:5000/api/notes/${editingNoteId}`,\n//           { ...note, content: cleanedContent },\n//           {\n//             headers: { Authorization: `Bearer ${token}` },\n//           }\n//         );\n//         const updated = notes.map((n) => (n._id === editingNoteId ? response.data.note : n));\n//         setNotes(updated);\n//       } else {\n//         // Create new note\n//         const response = await axios.post(\n//           \"http://localhost:/api/notes\",\n//           { ...note, content: cleanedContent },\n//           {\n//             headers: { Authorization: `Bearer ${token}` },\n//           }\n//         );\n//         setNotes([response.data.note, ...notes]);\n//       }\n\n//       setNote({ title: \"\", subject: \"\", content: \"\" });\n//       setEditingNoteId(null);\n//     } catch (error) {\n//       console.error(\"Error saving note:\", error);\n//     }\n//   };\n\n//   const editNote = (note) => {\n//     setEditingNoteId(note._id);\n//     setNote({ title: note.title, subject: note.subject, content: note.content });\n//   };\n\n//   const deleteNote = async (id) => {\n//     try {\n//       await axios.delete(`http://localhost:5000/api/notes/${id}`, {\n//         headers: { Authorization: `Bearer ${token}` },\n//       });\n//       setNotes(notes.filter((n) => n._id !== id));\n//     } catch (error) {\n//       console.error(\"Error deleting note:\", error);\n//     }\n//   };\n\n//   if (loading) return <p>Loading...</p>;\n\n//   return (\n//     <div className=\"note-manager-container\">\n//       <h2>Note Manager</h2>\n\n//       <div className=\"note-editor\">\n//         <input\n//           type=\"text\"\n//           placeholder=\"Title\"\n//           value={note.title}\n//           onChange={(e) => setNote({ ...note, title: e.target.value })}\n//           className=\"note-title-input\"\n//         />\n//         <input\n//           type=\"text\"\n//           placeholder=\"Subject\"\n//           value={note.subject}\n//           onChange={(e) => setNote({ ...note, subject: e.target.value })}\n//           className=\"note-subject-input\"\n//         />\n//         <Editor\n//           apiKey=\"qks55it6scopg5ibx5k982jzxunxu1x79rdlzkmx2yapv5bb\"\n//           value={note.content}\n//           onEditorChange={(content) => setNote({ ...note, content })}\n//           init={{\n//             height: 250,\n//             menubar: false,\n//             plugins: \"lists link image table code\",\n//             toolbar: \"undo redo | bold italic underline | bullist numlist | link | code\",\n//             content_css: \"https://cdn.jsdelivr.net/npm/tinymce@5/skins/ui/oxide/content.css\",\n//           }}\n//         />\n//         <button onClick={saveNote} className=\"save-button\">\n//           {editingNoteId ? \"Update Note\" : \"Add Note\"}\n//         </button>\n//       </div>\n\n//       <h3>All Notes</h3>\n//       <table className=\"notes-table\">\n//         <thead>\n//           <tr>\n//             <th>Title</th>\n//             <th>Subject</th>\n//             <th>Content</th>\n//             <th>Actions</th>\n//           </tr>\n//         </thead>\n//         <tbody>\n//           {notes.map((note) => (\n//             <tr key={note._id}>\n//               <td>{note.title}</td>\n//               <td>{note.subject}</td>\n//               <td dangerouslySetInnerHTML={{ __html: note.content }}></td>\n//               <td>\n//                 <button onClick={() => editNote(note)} className=\"edit-button\">\n//                   Edit\n//                 </button>\n//                 <button\n//                   onClick={() => deleteNote(note._id)}\n//                   className=\"delete-button\"\n//                 >\n//                   Delete\n//                 </button>\n//               </td>\n//             </tr>\n//           ))}\n//         </tbody>\n//       </table>\n//     </div>\n//   );\n// };\n\n// export default NoteManager;\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}