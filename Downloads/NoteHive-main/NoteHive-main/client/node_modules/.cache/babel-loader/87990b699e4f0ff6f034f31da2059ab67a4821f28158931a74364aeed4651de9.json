{"ast":null,"code":"// import React, { useEffect, useState } from \"react\";\n// import { useNavigate } from \"react-router-dom\";\n// import '../css/AdminPanel.css';  \n\n// const AdminPanel = () => {\n//   const navigate = useNavigate();\n//   const [users, setUsers] = useState([]);\n//   const [loading, setLoading] = useState(true);\n//   const [deletingUserId, setDeletingUserId] = useState(null); // Track which user is being deleted\n\n//   useEffect(() => {\n//     const userRole = localStorage.getItem(\"role\");\n//     const token = localStorage.getItem(\"token\");\n\n//     if (!userRole || userRole !== \"admin\" || !token) {\n//       navigate(\"/login\");\n//       return;\n//     }\n\n//     fetchUsers(token);\n//   }, [navigate]);\n\n//   // Fetch users\n//   const fetchUsers = async (token) => {\n//     try {\n//       const response = await fetch(\"http://localhost:5000/api/users\", {\n//         headers: { Authorization: `Bearer ${token}` },\n//       });\n\n//       if (!response.ok) throw new Error(\"Failed to fetch users\");\n\n//       const data = await response.json();\n//       setUsers(data);\n//     } catch (error) {\n//       console.error(\"üö® Error fetching users:\", error.message);\n//       alert(\"Failed to load users. Please try again.\");\n//     } finally {\n//       setLoading(false);\n//     }\n//   };\n\n//   // Change user role to admin\n//   const changeRole = async (userId) => {\n//     try {\n//       const token = localStorage.getItem(\"token\");\n\n//       const response = await fetch(`http://localhost:5000/api/promote/${userId}`, {\n//         method: \"PUT\",\n//         headers: { \"Content-Type\": \"application/json\", Authorization: `Bearer ${token}` },\n//         body: JSON.stringify({ role: \"admin\" }),\n//       });\n\n//       if (!response.ok) throw new Error(\"Failed to update role\");\n\n//       fetchUsers(token); // Refresh user list after role change\n//       alert(\"User promoted to admin successfully.\");\n//     } catch (error) {\n//       console.error(\"Failed to update role:\", error.message);\n//       alert(`Failed to promote user: ${error.message}`);\n//     }\n//   };\n\n//   // Delete a user\n//   const deleteUser = async (userId, username, email) => {\n//     // Add confirmation prompt\n//     const confirmDelete = window.confirm(\n//       `Are you sure you want to delete user \"${username}\"? This action cannot be undone.`\n//     );\n//     if (!confirmDelete) return;\n\n//     setDeletingUserId(userId); // Set the user being deleted to show a loading state\n//     try {\n//       const token = localStorage.getItem(\"token\");\n\n//       if (!token) {\n//         console.error(\"‚ùå No token found. User might not be logged in.\");\n//         alert(\"Session expired. Please log in again.\");\n//         navigate(\"/login\");\n//         return;\n//       }\n\n//       console.log(`üîπ Sending DELETE request for user ID: ${userId}`);\n//       const response = await fetch(`http://localhost:5000/api/users/${userId}`, {\n//         method: \"DELETE\",\n//         headers: {\n//           Authorization: `Bearer ${token}`,\n//           \"Content-Type\": \"application/json\",\n//         },\n//         body: JSON.stringify({ email }), // Include email in the request body\n//       });\n\n//       const data = await response.json();\n//       console.log(\"üîπ API Response:\", data);\n\n//       if (!response.ok) {\n//         throw new Error(data.message || \"Failed to delete user\");\n//       }\n\n//       console.log(\"‚úÖ User deleted successfully.\");\n//       alert(`User \"${username}\" deleted successfully.`);\n\n//       // Refresh user list after deletion\n//       await fetchUsers(token);\n//     } catch (error) {\n//       console.error(\"‚ùå Failed to delete user:\", error.message);\n//       alert(`Failed to delete user: ${error.message}`);\n//     } finally {\n//       setDeletingUserId(null); // Reset the deleting state\n//     }\n//   };\n\n//   if (loading) return <p>Loading...</p>;\n\n//   return (\n//     <div>\n//       <h2>Admin Panel</h2>\n\n//       {/* User Management */}\n//       <h3>User Management</h3>\n//       <table border=\"1\">\n//         <thead>\n//           <tr>\n//             <th>Username</th>\n//             <th>Email</th>\n//             <th>Role</th>\n//             <th>Actions</th>\n//           </tr>\n//         </thead>\n//         <tbody>\n//           {users.map((user) => (\n//             <tr key={user._id}>\n//               <td>{user.username}</td>\n//               <td>{user.email}</td>\n//               <td>{user.role}</td>\n//               <td>\n//                 {user.role !== \"admin\" && (\n//                   <button onClick={() => changeRole(user._id)}>Promote to Admin</button>\n//                 )}\n//                 <button\n//                   onClick={() => deleteUser(user._id, user.username, user.email)} // Pass email and username\n//                   style={{ marginLeft: \"10px\" }}\n//                   disabled={deletingUserId === user._id}\n//                 >\n//                   {deletingUserId === user._id ? \"Deleting...\" : \"Delete\"}\n//                 </button>\n//               </td>\n//             </tr>\n//           ))}\n//         </tbody>\n//       </table>\n//     </div>\n//   );\n// };\n\n// export default AdminPanel;","map":{"version":3,"names":[],"sources":["C:/Users/Anshi/Desktop/NoteHive-main/client/src/components/AdminPanel.js"],"sourcesContent":["// import React, { useEffect, useState } from \"react\";\n// import { useNavigate } from \"react-router-dom\";\n// import '../css/AdminPanel.css';  \n\n// const AdminPanel = () => {\n//   const navigate = useNavigate();\n//   const [users, setUsers] = useState([]);\n//   const [loading, setLoading] = useState(true);\n//   const [deletingUserId, setDeletingUserId] = useState(null); // Track which user is being deleted\n\n//   useEffect(() => {\n//     const userRole = localStorage.getItem(\"role\");\n//     const token = localStorage.getItem(\"token\");\n\n//     if (!userRole || userRole !== \"admin\" || !token) {\n//       navigate(\"/login\");\n//       return;\n//     }\n\n//     fetchUsers(token);\n//   }, [navigate]);\n\n//   // Fetch users\n//   const fetchUsers = async (token) => {\n//     try {\n//       const response = await fetch(\"http://localhost:5000/api/users\", {\n//         headers: { Authorization: `Bearer ${token}` },\n//       });\n\n//       if (!response.ok) throw new Error(\"Failed to fetch users\");\n\n//       const data = await response.json();\n//       setUsers(data);\n//     } catch (error) {\n//       console.error(\"üö® Error fetching users:\", error.message);\n//       alert(\"Failed to load users. Please try again.\");\n//     } finally {\n//       setLoading(false);\n//     }\n//   };\n\n//   // Change user role to admin\n//   const changeRole = async (userId) => {\n//     try {\n//       const token = localStorage.getItem(\"token\");\n\n//       const response = await fetch(`http://localhost:5000/api/promote/${userId}`, {\n//         method: \"PUT\",\n//         headers: { \"Content-Type\": \"application/json\", Authorization: `Bearer ${token}` },\n//         body: JSON.stringify({ role: \"admin\" }),\n//       });\n\n//       if (!response.ok) throw new Error(\"Failed to update role\");\n\n//       fetchUsers(token); // Refresh user list after role change\n//       alert(\"User promoted to admin successfully.\");\n//     } catch (error) {\n//       console.error(\"Failed to update role:\", error.message);\n//       alert(`Failed to promote user: ${error.message}`);\n//     }\n//   };\n\n//   // Delete a user\n//   const deleteUser = async (userId, username, email) => {\n//     // Add confirmation prompt\n//     const confirmDelete = window.confirm(\n//       `Are you sure you want to delete user \"${username}\"? This action cannot be undone.`\n//     );\n//     if (!confirmDelete) return;\n\n//     setDeletingUserId(userId); // Set the user being deleted to show a loading state\n//     try {\n//       const token = localStorage.getItem(\"token\");\n\n//       if (!token) {\n//         console.error(\"‚ùå No token found. User might not be logged in.\");\n//         alert(\"Session expired. Please log in again.\");\n//         navigate(\"/login\");\n//         return;\n//       }\n\n//       console.log(`üîπ Sending DELETE request for user ID: ${userId}`);\n//       const response = await fetch(`http://localhost:5000/api/users/${userId}`, {\n//         method: \"DELETE\",\n//         headers: {\n//           Authorization: `Bearer ${token}`,\n//           \"Content-Type\": \"application/json\",\n//         },\n//         body: JSON.stringify({ email }), // Include email in the request body\n//       });\n\n//       const data = await response.json();\n//       console.log(\"üîπ API Response:\", data);\n\n//       if (!response.ok) {\n//         throw new Error(data.message || \"Failed to delete user\");\n//       }\n\n//       console.log(\"‚úÖ User deleted successfully.\");\n//       alert(`User \"${username}\" deleted successfully.`);\n\n//       // Refresh user list after deletion\n//       await fetchUsers(token);\n//     } catch (error) {\n//       console.error(\"‚ùå Failed to delete user:\", error.message);\n//       alert(`Failed to delete user: ${error.message}`);\n//     } finally {\n//       setDeletingUserId(null); // Reset the deleting state\n//     }\n//   };\n\n//   if (loading) return <p>Loading...</p>;\n\n//   return (\n//     <div>\n//       <h2>Admin Panel</h2>\n\n//       {/* User Management */}\n//       <h3>User Management</h3>\n//       <table border=\"1\">\n//         <thead>\n//           <tr>\n//             <th>Username</th>\n//             <th>Email</th>\n//             <th>Role</th>\n//             <th>Actions</th>\n//           </tr>\n//         </thead>\n//         <tbody>\n//           {users.map((user) => (\n//             <tr key={user._id}>\n//               <td>{user.username}</td>\n//               <td>{user.email}</td>\n//               <td>{user.role}</td>\n//               <td>\n//                 {user.role !== \"admin\" && (\n//                   <button onClick={() => changeRole(user._id)}>Promote to Admin</button>\n//                 )}\n//                 <button\n//                   onClick={() => deleteUser(user._id, user.username, user.email)} // Pass email and username\n//                   style={{ marginLeft: \"10px\" }}\n//                   disabled={deletingUserId === user._id}\n//                 >\n//                   {deletingUserId === user._id ? \"Deleting...\" : \"Delete\"}\n//                 </button>\n//               </td>\n//             </tr>\n//           ))}\n//         </tbody>\n//       </table>\n//     </div>\n//   );\n// };\n\n// export default AdminPanel;"],"mappings":"AAAA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}