{"ast":null,"code":"\n// import React, { useState, useEffect } from \"react\";\n// import { Editor } from \"@tinymce/tinymce-react\";\n// import { useNavigate } from \"react-router-dom\";\n// import axios from \"axios\";\n// import \"../css/NoteManager.css\";\n\n// const NoteManager = () => {\n//   const navigate = useNavigate();\n//   const [notes, setNotes] = useState([]);\n//   const [loading, setLoading] = useState(true);\n//   const [note, setNote] = useState({ title: \"\", subject: \"\", content: \"\" });\n//   const [editingNoteId, setEditingNoteId] = useState(null);\n\n//   const token = localStorage.getItem(\"token\");\n\n//   // ✅ Fetch notes (Admin only)\n//   useEffect(() => {\n//     const fetchNotes = async () => {\n//       try {\n//         const response = await axios.get(\"http://localhost:5000/api/notes\", {\n//           headers: { Authorization: `Bearer ${token}` },\n//         });\n//         setNotes(response.data);\n//       } catch (error) {\n//         console.error(\"Error fetching notes:\", error);\n//         alert(\"Failed to fetch notes. Make sure you are an admin.\");\n//       } finally {\n//         setLoading(false);\n//       }\n//     };\n\n//     fetchNotes();\n//   }, [token]);\n\n//   // ✅ Save (Add/Update)\n//   const saveNote = async () => {\n//     const cleanedContent = note.content.replace(/^<p>/, \"\").replace(/<\\/p>$/, \"\");\n//     console.log(\"Saving note:\", note);\n\n//     try {\n//       if (editingNoteId) {\n//         // Update existing note\n//         const response = await axios.put(\n//           `http://localhost:5000/api/notes/${editingNoteId}`,\n//           { ...note, content: cleanedContent },\n//           { headers: { Authorization: `Bearer ${token}` } }\n//         );\n\n//         const updatedNote = response.data.note;\n//         const updatedNotes = notes.map((n) => (n._id === editingNoteId ? updatedNote : n));\n//         setNotes(updatedNotes);\n//       } else {\n//         // Create new note\n//         const response = await axios.post(\n//           \"http://localhost:5000/api/notes\",\n//           { ...note, content: cleanedContent },\n//           { headers: { Authorization: `Bearer ${token}` } }\n//         );\n\n//         setNotes([response.data.note, ...notes]);\n//       }\n\n//       setNote({ title: \"\", subject: \"\", content: \"\" });\n//       setEditingNoteId(null);\n//     } catch (error) {\n//       console.error(\"Error saving note:\", error);\n//       alert(\"Failed to save note. Make sure all fields are filled and you're authorized.\");\n//     }\n//   };\n\n//   // ✅ Edit note\n//   const editNote = (note) => {\n//     setEditingNoteId(note._id);\n//     setNote({\n//       title: note.title,\n//       subject: note.subject,\n//       content: note.content,\n//     });\n//   };\n\n//   // ✅ Delete note\n//   const deleteNote = async (id) => {\n//     try {\n//       await axios.delete(`http://localhost:5000/api/notes/${id}`, {\n//         headers: { Authorization: `Bearer ${token}` },\n//       });\n\n//       setNotes(notes.filter((n) => n._id !== id));\n//     } catch (error) {\n//       console.error(\"Error deleting note:\", error);\n//       alert(\"Failed to delete note. Are you an admin?\");\n//     }\n//   };\n\n//   if (loading) return <p>Loading...</p>;\n\n//   return (\n//     <div className=\"note-manager-container\">\n//       <h2>Note Manager</h2>\n\n//       {/* Editor */}\n//       <div className=\"note-editor\">\n//         <input\n//           type=\"text\"\n//           placeholder=\"Title\"\n//           value={note.title}\n//           onChange={(e) => setNote({ ...note, title: e.target.value })}\n//           className=\"note-title-input\"\n//         />\n//         <input\n//           type=\"text\"\n//           placeholder=\"Subject\"\n//           value={note.subject}\n//           onChange={(e) => setNote({ ...note, subject: e.target.value })}\n//           className=\"note-subject-input\"\n//         />\n//         <Editor\n//           apiKey=\"qks55it6scopg5ibx5k982jzxunxu1x79rdlzkmx2yapv5bb\"\n//           value={note.content}\n//           onEditorChange={(content) => setNote({ ...note, content })}\n//           init={{\n//             height: 250,\n//             menubar: false,\n//             plugins: \"lists link image table code\",\n//             toolbar: \"undo redo | bold italic underline | bullist numlist | link | code\",\n//           }}\n//         />\n//         <button onClick={saveNote} className=\"save-button\">\n//           {editingNoteId ? \"Update Note\" : \"Add Note\"}\n//         </button>\n//       </div>\n\n//       {/* Notes Display */}\n//       <h3>All Notes</h3>\n//       <table className=\"notes-table\">\n//         <thead>\n//           <tr>\n//             <th>Title</th>\n//             <th>Subject</th>\n//             <th>Content</th>\n//             <th>Actions</th>\n//           </tr>\n//         </thead>\n//         <tbody>\n//           {notes.map((note) => (\n//             <tr key={note._id}>\n//               <td>{note.title}</td>\n//               <td>{note.subject}</td>\n//               <td>\n//                 <div dangerouslySetInnerHTML={{ __html: note.content .split(\" \")\n//         .slice(0, 10)\n//         .join(\" \") + \"...\" }} />\n//               </td>\n//               <td>\n//                 <button onClick={() => editNote(note)} className=\"edit-button\">\n//                   Edit\n//                 </button>\n//                 <button onClick={() => deleteNote(note._id)} className=\"delete-button\">\n//                   Delete\n//                 </button>\n//               </td>\n//             </tr>\n//           ))}\n//         </tbody>\n//       </table>\n//     </div>\n//   );\n// };\n\n// export default NoteManager;","map":{"version":3,"names":[],"sources":["C:/Users/Anshi/Desktop/NoteHive-main/client/src/pages/NoteManager.js"],"sourcesContent":["\n// import React, { useState, useEffect } from \"react\";\n// import { Editor } from \"@tinymce/tinymce-react\";\n// import { useNavigate } from \"react-router-dom\";\n// import axios from \"axios\";\n// import \"../css/NoteManager.css\";\n\n// const NoteManager = () => {\n//   const navigate = useNavigate();\n//   const [notes, setNotes] = useState([]);\n//   const [loading, setLoading] = useState(true);\n//   const [note, setNote] = useState({ title: \"\", subject: \"\", content: \"\" });\n//   const [editingNoteId, setEditingNoteId] = useState(null);\n\n//   const token = localStorage.getItem(\"token\");\n\n//   // ✅ Fetch notes (Admin only)\n//   useEffect(() => {\n//     const fetchNotes = async () => {\n//       try {\n//         const response = await axios.get(\"http://localhost:5000/api/notes\", {\n//           headers: { Authorization: `Bearer ${token}` },\n//         });\n//         setNotes(response.data);\n//       } catch (error) {\n//         console.error(\"Error fetching notes:\", error);\n//         alert(\"Failed to fetch notes. Make sure you are an admin.\");\n//       } finally {\n//         setLoading(false);\n//       }\n//     };\n\n//     fetchNotes();\n//   }, [token]);\n\n//   // ✅ Save (Add/Update)\n//   const saveNote = async () => {\n//     const cleanedContent = note.content.replace(/^<p>/, \"\").replace(/<\\/p>$/, \"\");\n//     console.log(\"Saving note:\", note);\n\n//     try {\n//       if (editingNoteId) {\n//         // Update existing note\n//         const response = await axios.put(\n//           `http://localhost:5000/api/notes/${editingNoteId}`,\n//           { ...note, content: cleanedContent },\n//           { headers: { Authorization: `Bearer ${token}` } }\n//         );\n\n//         const updatedNote = response.data.note;\n//         const updatedNotes = notes.map((n) => (n._id === editingNoteId ? updatedNote : n));\n//         setNotes(updatedNotes);\n//       } else {\n//         // Create new note\n//         const response = await axios.post(\n//           \"http://localhost:5000/api/notes\",\n//           { ...note, content: cleanedContent },\n//           { headers: { Authorization: `Bearer ${token}` } }\n//         );\n\n//         setNotes([response.data.note, ...notes]);\n//       }\n\n//       setNote({ title: \"\", subject: \"\", content: \"\" });\n//       setEditingNoteId(null);\n//     } catch (error) {\n//       console.error(\"Error saving note:\", error);\n//       alert(\"Failed to save note. Make sure all fields are filled and you're authorized.\");\n//     }\n//   };\n\n//   // ✅ Edit note\n//   const editNote = (note) => {\n//     setEditingNoteId(note._id);\n//     setNote({\n//       title: note.title,\n//       subject: note.subject,\n//       content: note.content,\n//     });\n//   };\n\n//   // ✅ Delete note\n//   const deleteNote = async (id) => {\n//     try {\n//       await axios.delete(`http://localhost:5000/api/notes/${id}`, {\n//         headers: { Authorization: `Bearer ${token}` },\n//       });\n\n//       setNotes(notes.filter((n) => n._id !== id));\n//     } catch (error) {\n//       console.error(\"Error deleting note:\", error);\n//       alert(\"Failed to delete note. Are you an admin?\");\n//     }\n//   };\n\n//   if (loading) return <p>Loading...</p>;\n\n//   return (\n//     <div className=\"note-manager-container\">\n//       <h2>Note Manager</h2>\n\n//       {/* Editor */}\n//       <div className=\"note-editor\">\n//         <input\n//           type=\"text\"\n//           placeholder=\"Title\"\n//           value={note.title}\n//           onChange={(e) => setNote({ ...note, title: e.target.value })}\n//           className=\"note-title-input\"\n//         />\n//         <input\n//           type=\"text\"\n//           placeholder=\"Subject\"\n//           value={note.subject}\n//           onChange={(e) => setNote({ ...note, subject: e.target.value })}\n//           className=\"note-subject-input\"\n//         />\n//         <Editor\n//           apiKey=\"qks55it6scopg5ibx5k982jzxunxu1x79rdlzkmx2yapv5bb\"\n//           value={note.content}\n//           onEditorChange={(content) => setNote({ ...note, content })}\n//           init={{\n//             height: 250,\n//             menubar: false,\n//             plugins: \"lists link image table code\",\n//             toolbar: \"undo redo | bold italic underline | bullist numlist | link | code\",\n//           }}\n//         />\n//         <button onClick={saveNote} className=\"save-button\">\n//           {editingNoteId ? \"Update Note\" : \"Add Note\"}\n//         </button>\n//       </div>\n\n//       {/* Notes Display */}\n//       <h3>All Notes</h3>\n//       <table className=\"notes-table\">\n//         <thead>\n//           <tr>\n//             <th>Title</th>\n//             <th>Subject</th>\n//             <th>Content</th>\n//             <th>Actions</th>\n//           </tr>\n//         </thead>\n//         <tbody>\n//           {notes.map((note) => (\n//             <tr key={note._id}>\n//               <td>{note.title}</td>\n//               <td>{note.subject}</td>\n//               <td>\n//                 <div dangerouslySetInnerHTML={{ __html: note.content .split(\" \")\n//         .slice(0, 10)\n//         .join(\" \") + \"...\" }} />\n//               </td>\n//               <td>\n//                 <button onClick={() => editNote(note)} className=\"edit-button\">\n//                   Edit\n//                 </button>\n//                 <button onClick={() => deleteNote(note._id)} className=\"delete-button\">\n//                   Delete\n//                 </button>\n//               </td>\n//             </tr>\n//           ))}\n//         </tbody>\n//       </table>\n//     </div>\n//   );\n// };\n\n// export default NoteManager;\n"],"mappings":";AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}